<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
    var maxargs = 32;
#>
using System.Threading.Tasks;

namespace TestScope
{
    public delegate ValueTask PreScopeAsyncExt();

<# for (var i = 1; i <= maxargs; i++)
{
  var argTypes = String.Join(", ", Enumerable.Range(1,i).Select(x => $"in TArg{x}"));
  var arguments = String.Join(", ", Enumerable.Range(1,i).Select(x => $"TArg{x} arg{x}"));
#>
    public delegate ValueTask PreScopeAsyncExt<<#= argTypes #>>(<#= arguments #>);

<# } #>
    public static class PreScopeAsyncExtExtensions
    {
        public static TestFixture PreScopeAsync(this TestFixture testFixture, PreScopeAsyncExt action)
            => testFixture.OnScopeAsync(async options =>
            {
                await action.Invoke();

                await options.NextAsync();
            });

<# for (var i = 1; i <= maxargs; i++)
{
  var argTypes = String.Join(", ", Enumerable.Range(1,i).Select(x => $"TArg{x}"));
  var argVariables = String.Join(", ", Enumerable.Range(1,i).Select(x => $"arg{x}"));
#>
        public static TestFixture PreScopeAsync<<#= argTypes #>>(this TestFixture testFixture, PreScopeAsyncExt<<#= argTypes #>> action)
            => testFixture.OnScopeAsync(async options =>
            {
<# for (var j = 1; j <= i; j++) { #>
                var arg<#= j #> = ScopeArgLocator<TArg<#= j #>>.Get(options);
<# } #>

                await action.Invoke(<#= argVariables #>);
                
                await options.NextAsync();
            });

<# } #>
    }
}